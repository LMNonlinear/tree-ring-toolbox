function [W,NMLIST]=trs2tsm(nfiles,endyears,I1)
% [W,NMLIST]=trs2tsm(nfiles,endyears,I1)
% tree-ring storage to time-series matrix conversion
%
% Pull series from tree-ring storage format from various .mat files
% and build a time-series matrix
%
% D Meko 8-17-95
%
%
%*********************  IN ARGS *****************************
%
% nfiles (1 x 1)i   number of mat files to grab series from
% endyears (1 x 2)i start and end year of desired output matrix
% I1 (nfiles x ?)i  which series to take from each input file
% * see notes
%
%*********************  OUT ARGS **************************
%
% W (mW x nW)r the time-series matrix of selected files
%		NaN-filled;  mW computed from endyears (see above);
%		nW computed from L1
%
% NMLIST (m1 x 8)s  names of time series in W
%
%
%***************** USER-WRITTEN FUNCTIONS CALLED -- NONE
%
%
%*************  NOTES ********************************
%
% Sample application.  Form initial input tree-ring matrix to be
% used in getting predictors for reconstructing San Pedro Basin PPT
% by "individual-tree-index" (ITI) model.  Have PDF.mat, DCY.mat,
% etc., holding the tree indices, and I1 telling which trees to
% use
%
% Input .mat files originally come from running 
% treei.m and related functions on .rwl files
%
% I1 is built manually from evaluation of tree-indices at the sites.
% For example, maybe only the trees with ring widths back before
% 1800 will be used.  Elements in a row of I1 tell which trees
% to use from a given filen.  "Which" means the row
% in Tnms
% 
% The program expects  input files to be available in the working
% directory. The files must be named file1, file2, ...
% The files are .mat files previouly generated by the DMM tree-ring
% standarding package, and renamed and copied to this working
% directory.  For example, might have PAD.MAT, DCY.MAT and
% MIP.MAT and have copied them as FILE1.MAT, FILE2.MAT, FILE3.MAT
% to c:\wrk9.  
%
% Beware of conflicts in naming of variables in the FILEn.MAT files
% and functions that use them.  For example, in writing trs2tsm.m,
% I first used the variable Z instead of W as the output matrix.  
% This caused a conflict because Z was also a stored variable in
% FILEn.MAT
% 
%*************************  STEPS ***************************
%
% check args
% size, allocate, initialize
% loop over input mat files
%	pull yrs matrix
%	build row indices
%	loop over series to be used
%		get names and data
%		store names and data
%
%


%*************  CHECK ARGUMENTS  ***************

if endyears(2) < endyears(1),
	error('endyears invalid')
end
if nfiles<1, error('nfiles must be greater than zero'), end

% Check that index matrix I1 OK:  each row shoul contain
% positive integers only, except  zeros-filled to right end;
% Number of rows should match number of input files
[mI1,nI1]=size(I1);
if mI1~= nfiles, 
	error('number of I1 rows should equal nfiles')
end
if any(any(rem(I1,1))) |  any(any(I1<0))
	error('I1 must be non-negative integers')
end
neach = sum((I1>0)'); % rv, number of trees to use from each file
if any(neach==0),
	error('A row of I1 is all zeros')
end

%***************** SIZE AND ALLOCATE ****************

% Initialize W as NaN
a = NaN;
mW = endyears(2) - endyears(1) + 1; % number of rows in W
nW = sum(neach);  % number of columns in W
W = a(ones(mW,1), ones(nW,1));

% Initialize NMLIST as blanks
NMLIST = blanks(6); % row vector of length needed to hold a name
NMLIST = NMLIST(ones(nW,1),:); % dupe to as many rows as series to use


%****************** LOOP OVER MAT FILES

igo=1; % initialize starting row in NMLIST for first file;
		% igo will also be starting col in W of first series in file

for n = 1:nfiles;

	II1 = I1(n,:); % rv, rows of Tnms to use from this file, zero-filled
	II1 =II1((II1>0)); % greater-than-zero elements
	nsers = length(II1);
	if neach(n)~= length(II1),
		error('neach(n) not equal to nsers');
	end

	% Load the mat file
	matfile= ['file' int2str(n)]; 
	eval(['load '  matfile]);
	% These generic .mat files hold among other things
	%  ET -- strung out vector of tree indices
	%  Tnms -- 6-character tree names
	%  ETyrs -- start year, end year and start row index in
	%	ET of each tree index
%	if ~exist(matfile), break, end


	[m3,n3]=size(ET);
	[m4,n4]=size(Tnms);
	[m5,n5]=size(ETyrs);

	 
	% Check that nsers consistent with number of series in file
	if nsers >m4,
		error('Too few series in Tnms -- and so in ET')
	end

	% Pull out the needed rows of Tnms and ETyrs
	A = Tnms(II1,:);
	B = ETyrs(II1,:);

	istop = igo+nsers-1; % ending row in NMLIST to place this file;
		% And, ending col in W of last series from this file
	
	NMLIST(igo:istop,:)=A; % store names for this file's trees

	% Loop over series in this mat file to get and store tree indices
		for k = 1:nsers;	
			kk = II1(k);
			icol = igo + k - 1; % col in W for this series

			yr1 = ETyrs(kk,1);  % start, end years for this series
			yr2 = ETyrs(kk,2);
			i1 = ETyrs(kk,3);  % row index within ET of first year
			i2 = i1 + (yr2-yr1); % ... of last year
			i3 = yr1 - endyears(1) + 1; % row-index in W for first year
			i4 = i3 + (yr2-yr1); % .. . last year
			W(i3:i4,icol) = ET(i1:i2);
		end

	igo = istop + 1; % col in W for first series in next .mat file
end
