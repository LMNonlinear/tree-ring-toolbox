function [D,D1,nD,I2]=near3(X,s,n,ncols,opt)
% Nearest stations and distance to gridpoints or key locations.
% Example of use: Prepare distance matrices for gridding 1035 station
%  PDSI series to a 157-point long-lat grid.  Or: Prepare distance
%  matrices for distance weighting 1035 station PDSI to locations of
%  tree-ring sites.

% D. Meko, Sept 10, 1993
%***************   INPUT ARGS *********************************
%
%  X(m1 x m2)  matrix of distances previously generated (as by 
%   gcdist.m).  Say have two sets of locations -- A and B.  A row
%   of X holds distances from a gridpoint in A to each station in B.  Row 1
%   is for point 1 in A, row 2 for point 2 in A, and so forth.  m1 is 
%   number of gridpoints (rows in A), and m2 is the number of stations
%   (rows in B)
% s (1 x 1)  search radius (e.g., 230 km)
% n (1 x 1)  max number of stations to include in set of 'nearest'
%   stations to a gridpoint
% ncols (1 x 1)  number of desired columns in D1,D.  Need to set ncol
%   large enough to accomodate up to n stations.
% opt (1 x 1)  1=nearest n stations, disregarding search radius
%	       0=nearest "up to n" stations, but all must be 
%		 within search radius s.


%**************   OUTPUT ARGS  ****************************************
%
% D (m1 x ncols) [R] distances corresp to D1
% D1 (m1 x ncols) [I] subscript array of nearest sites, corresp to cols of X 
% nD (m1 x 1) [I] number of valid B stations for each A location
% I2 (m3 x 1) [I] pointer to valid gridpoints (those with nonzero nD)


%*******************   NOTES   ****************************************
%
% near3.m differs greatly from near.m, near1.m and near2.m.  Those prev
%   scipts relied on a previously defined cartesian coord system, and
%   computed distances from input matrices of x,y coords. 
%   But near3.m works on a distance matrix generated by great-circle
%   distance algorithm in gcdist.m.  The individual locations of samples 
%   do not have x,y cartesian coordinate, just longitudes and latitudes.
%   Note also that near3.m is a function, while near.m, near1.m, near2.m
%   are scripts.
%
% near3.m was written by modifying near.m
% 
%**********************  BEGIN  ***************************************

a=-9.0; % dummy filler value D
ia=-9;  % for D1

[m1,m2]=size(X);

D1=zeros(m1,ncols);  % allocate space
D=zeros(m1,ncols);

for i=1:m1    % Loop for each gridpoint
	C4=X(i,:);   % distances to stations from ith gridpoint
	[Y,I]=sort(C4);  % from nearest to farthest
	D1(i,1:n) = I(1:n);  % Consider only up to nearest n stations in 
	D(i,1:n) = Y(1:n);   % checking that in search radius 
end

ndiff=ncols-n;  % this many elements of each row of D,D1 are 
%   automatically dummy values because want only up to nearest n stations.
nD=ones(m1,1) * n;
D1(:,n+1:ncols) = ia(ones(m1,1),ones(ndiff,1));
D(:,n+1:ncols) = a(ones(m1,1),ones(ndiff,1));

% Some other entries may be dummies if some of nearest n stations are
% outside search radius.
if opt==0;  % Flag entries of D1 and D as invalid if outside search radius.
	G=D>s;  % Logical=1 if stns outside search radius.
	jj=sum(sum(G));  % Number of too-distant stations.
	D1(G)=ia(ones(jj,1),:);
	D(G)=a(ones(jj,1),:);
	nD = nD - (sum(G'))';  % No. of stns within search distance for
	  % each gridpoint.
end


% This code added to near.m 11-18-92.  Compute cv I2, a pointer to rows of D, nD,D1
% specifying which gridpoints are valid for future gridding (by e.g., 
% dwgt1.m).  An invalid gridpoint means one without at least 1 station
% in the search distance.
 
I2=(1:length(nD))';  % initialize to assume all gridpoints valid
I2=I2(nD~=0);  % a row subscript vector into original matrix of gridpoint
  % locations.  Only subscripts to 'valid' gridpoints are included in 
  % I2.  If all gridpoints are valid, I2 is simply a column vector of
  % sequential numbers [1 2 3 ... m1]'.


