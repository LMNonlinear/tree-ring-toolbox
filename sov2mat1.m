function [X,N]= sov2mat1(v,P,Iuse,pf3,yrgo,yrsp)
% strung-out vector of time series to time series matrix
% CALL:  [X,N]= sov2mat1(v,P,Iuse,pf3,yrgo,yrsp);
%
% Meko 8-13-97
%
%
%************** INPUT  **********************
%
% v (mv x 1)r vector of multiple time series; created by, say, crn2sov.m
% P (mP x 5)i pointer and years reference for v; one row per time series:
%		col 1: sequential number of time series
%		col 2: start year of time series in v
%		col 3: end year of time series in v
%		col 4: row index to start year of series in v
%		col 5: row index to end year of series in v
% Iuse (mI x 1); row pointer to P indicating which time series in v to use
%		as columns of the time series matrix X
%	pf3 (1 x ?)s  name of asci file holding "names" of each time series in v
%		Example:  'c:\wrk6\crnfna.dat'
% yrgo (1 x 1)i  desired start year of output tsm X
% yrsp (1 x 1)i  desired end year ...
%
%
%************** OUTPUT **********************
%
% X (mX x ?)r  tsm of selected time series;  year in col 1; culled from v according to 
%		Iuse and yrgo,yrsp
% N (? x 8)s string matrix of names or labels for series in X
% Leading 8 chars of the lines in the name-tag file are used
% as the series identifiers.  If fewer than 8 characters 
% (e.g.,   x01.crn), right-padded with blanks
%
%********* Optional Output ********
%
% 1 User prompted if desire X and N to be stored in a .mat output file
%
% 2 (optional) -  .DAT holding same information as the .MAT file,
%		but with the names as column headings; not yet implemented
%
%****************** NOTES ***************************************
%
% Written as intermediate processing function to prepare tree-ring matrix
% as input to sequence of screen?.m functions.  Typically, v and YRS were
% generated by crn2sov.m



%--------------  Check Inputs
[mv,nv]=size(v);
if nv~=1, error('v must be cv'); end;

[mP,nP]=size(P);
if nP~=5, error('P must be 5-col matrix'); end;

[mtemp,ntemp]=size(Iuse);
if ntemp~=1; error('Iuse must be cv'); end;
if max(Iuse)> mP | any(Iuse<1);
	error('Illegal entries in Iuse; not consistent with row size of P');
end

ncull= mtemp; % number of series to cull for use in X


% -------Get the variable labels, which are the time series names for series in v
  
fid3=fopen(pf3,'r');
% This file holds a string in each line.  The string identifies
% a time series in the sov.  The strings might differ in length
% from line to line, so cannot read in a matrix.

n1=0; % counter for number of lines in pf3 
while 1
	line = fgetl(fid3);
	if ~isstr(line), break, end
	n1=n1+1;
end

if n1~=mP,
	error('N of lines in file3 not equal to row-size of P')
end

fseek(fid3,0,-1); % rewind file3

% Build name-tag string matrix S.  Assume col-size 8
S='        ';
S=S(ones(n1,1),:);
for n = 1:n1;
	line=fgetl(fid3);
	line=deblank(line);
	ns = length(line);
	if ns>8,
		line=line(1:8);
	end
	S(n,:)=line;
end
% Note that S has labels for all time series in v;  not yet culled by Icull
fclose(fid3)


%---------------  Cull the desired rows of S,P

N=S(Iuse,:); % names of desired series
P=P(Iuse,:);

if yrsp<=yrgo,
	error('Stop year must be later than start year')
end
if yrgo>=max(P(:,3))| yrsp <= min(P(:,2)),
	error('yrgo,yrsp would lead to one or more desired series with no data');
end
nyrs = yrsp-yrgo+1; % number of years in output tsm X


%--------------- Initialize a matrix to store the output tsm 
a = NaN;
X=a(ones(nyrs,1),ones(ncull+1,1));
yrX = (yrgo:yrsp)';
X(:,1)=yrX;


%**************************************************


% Loop over the desired series, pulling out the rows (years)
% in the "igo to isp" period, if any, and putting in the correct
% rows of X .  Must allow for possibility that some selected
% series may have no non-missing data in the nyrs key period.
for n = 1:ncull;
	yr1 = [P(n,2):P(n,3)]';
	nsize=P(n,3)-P(n,2)+1; % number of years of data for this series in v
	if (yr1(1)>yrsp | yr1(nsize)<yrgo); % No usable data 
		% skip this series, resulting in NaN entries for the col in X
	else
		vv = v(P(n,4):P(n,5)); % cv if data in v for this series
		% Make two pointer logical vectors.  L1 is pointer to vv
		% marking rows in the yrgo to yrsp target period. L2 is a
		% pointer to X marking the usable years from v for this
		% series
		L1 = yr1>=yrgo  & yr1<=yrsp; % pointer to desired rows of vv
		L2 = yrX>=P(n,2) & yrX<=P(n,3); % 
		% Put the data in the slots
		X(L2,n+1)=vv(L1);
	end
end
%

% Save result in .mat file
file5=uiputfile('*.mat','Save tsm and names string matrix in this file: ');
eval(['save ',file5,' X N'])


