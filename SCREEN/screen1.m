% screen1.m -- a script file
% 
% Screen a network of tree-ring chronologies for climate signal
% using output-error modeling
%
% D. Meko 6-27-96
%
% First in a sequence of functions for screening 
%
%  screen1.m -- chrons vs nearest ns stations 
%  screen2.m -- uses results from screen1.m to make pointers to 
%		"best" station to pair with each site.  "Best" by length
%		of overlap data for modeling and proximity
%	screen3.m -- model chrons vs their paired climate series as
%		identified in screen2.m
%	screen4.m -- detailed diagostic modeling of a single chronology, 
%		using some input generated by a run of screen3.m with
%		O(1)==2
%  screen5.m -- prepare results for mapping by surfer
%  
%
%************* INPUT - from screen-prompted input or files
%
% T (mT x nT)r chronology indices; NaN filled; variable start and
%		end years allowed; mT years, nT chronologies
% C (mC x nC)r climate variable; NaN filled; variable start and 
%		end years allowed; mC years, nC stations
% YRS (2 x 2)i start, end years of 
%		row-1: T
%		row-2: C
% ds (1 x 1)r search radius (km)
% mx (1 x 5)i maximum setting for 
%  1-number of stations to find in search radius
%  2-number of B-operator parameters in a model
%  3-number of F-operator parameters
%  4-number of total parameters in model
%  5-number of ranked models to consider (nranked)
%
%---- next info normally loaded from distinfa.mat ---
%
% N (nT x 1)i number of stations found in search radius;
%		nT chronologies
% W (nT x mxs)i which stations (columns of C) grouped with this
%		chronology
% D (mD x nD)r distance (km) from chronology to each station in
%		search radius;  mD==nT; nD==mxs
%
% 
%************************* OUT ARGS **********************
%
%
% K2 (nT x mxs)i  significant signal?  meaning are any of the
%		parameters of the full-period model signifantly different
% 		from zero (2+ sdevs); 1=yes 0=no
% OB (nT x mxs)i  order of B-operator in model
% OF (nT x mxs)i  order of F-operator in model
% R1 (nT x mxs)r  corr coefficient between y(t) and u(t)
% R2 (nT x mxs)r  corr coefficient between y(t) and B u(t)
% G (nT x mxs)i number of significant (99% level) autocorrelation
%		coefficients  of residuals of model
% H (nT x mxs)i number of significant (99% level) cross-
%		correlations between input u(t) and residuals e(t)
% S (nT x mxs)r variance-explained fraction for best OE model
%		Computed as 1 - (var(residuals)/var(y)) 
%		for final model fit to entire data period
% Smore(nT x mxs)r incremental variance explained above OE(1,0) model
%     NaN if final model is OE(1,0)
% NY (nT x mxs)i number of years used to fit final OE model
%
%****************** STEPS IN SCREENING*************************
%
% Check input data
% Get distance settings, sites in search radius
% Model each chronology -- output series y(t)
%	Pull out submatrices of columns
%	Loop over "near" climate stations -- input series u(t)
%		Pull row subset for valid overlap years
%		Loop over potential models
%			Find best model
%		End Loop
%		Fill slots in R1, R2, etc
%	End Loop
% 
%
%******************** NOTES *************************************
%
% Function oesplit.m is called to perform split-sample modeling;
% calibrate on first half and verify on second; then vice versa;
%
% Details of the split-sample modeling are covered in 
% oesplit.m
%
% Coordinate file TC and CC are assumed to be in mapping format,
% that is, decimal long (negative west) followed by decimal
% latitude
%
% Modeling period is flexible to differing time coverage of the
% climate station series and chronologies;  model is fit to 
% full common period for any pair
%
% The call to near3 is hard-coded to get the nearest mx(1) stations,
% regardless of whether they are in the search radius.  To change
% this, see instructions for near3.m and pass a different option
% to near3.m
%
% Originally written as a function, but because of "stack" errors,
% used as a script file.
%****************** CHECK INPUT DATA, SIZE, ALLOCATE

clear

tstart=clock; % start timer to check elapsed time for running script (see elapsed)

% Help in file selection by specifying letter code for tree-ring set
char=input('Letter code for tree-ring matrix: ','s');


% Get the tree-ring data tsm
fn5=['tsm' char '.mat'];
txt5='TSM? (in D:\wrk6)--  tree-ring indices';
[file5,path5]=uigetfile(fn5,txt5);
eval(['load ',path5,file5]);  % tree-data will be in X, but with year
		% in col 1
X(:,1)=[];
T=X;
clear X;


% Get the climate data tsm
fn5=['C*.mat'];
txt5='CP#.mat  -- climate data,season #';
[file5,path5]=uigetfile(fn5,txt5);
eval(['load ',path5,file5]);  % climate data is C
clear X path5 file5 N
% T and C should now be in workspace

% Get the years info and miscellanous settings
fn5=[char '*.mat'];
txt5=[char 'P#IS1.MAT -- misc screen1.m input']; 
[file5,path5]=uigetfile(fn5,txt5);
eval(['load ',path5,file5]); 

% Get the site-to-station distance info
fn5=['DIST' char '.mat'];
txt5='DIST?.MAT -- distance info'; 
[file5,path5]=uigetfile(fn5,txt5);
eval(['load ',path5,file5]); 

clear path5 file5
pack


a=NaN;

[mT,nT]=size(T);
[mC,nC]=size(C);

[m1,n1]=size(YRS);
if m1~=2 | n1~=2
	error('YRS must be 2 x 2');	
end

[m1,n1]=size(mx);
if m1~=1 | n1~=5,
	error('mx must be 1 x 5')
end
maxs=mx(1); % maximum number of stations to grab within search
	% radius; use the nearest maxs stations
nb = mx(2); % maximum allowable order of B operator
nf = mx(3); % maximum allowable order of F operator
ntot = mx(4); % maximum total number of parameters allowed
nranked=mx(5); % number of "good" models to consider before
		% selecting best OE model



% Initialize some matrices
R1=a(ones(nT,1),ones(maxs,1)); % Correlations y(t) vs u(t)
R2=a(ones(nT,1),ones(maxs,1)); % Correlations y(t) vs Bu(t)
S=a(ones(nT,1),ones(maxs,1)); % Variance-explained fraction
Smore=a(ones(nT,1),ones(maxs,1)); % Variance-explained fraction above OE(1,0)
OB=a(ones(nT,1),ones(maxs,1)); % B-operator order for best model
OF=a(ones(nT,1),ones(maxs,1)); % F-operator order for best model
K2=a(ones(nT,1),ones(maxs,1)); % any signif params in final model?
H= a(ones(nT,1),ones(maxs,1)); % number of sig autoc of residual
G= a(ones(nT,1),ones(maxs,1)); % number of sig cc of res with input
Q=a(ones(nT,1),ones(maxs,1)); % "way" best model was finally selected
NY=a(ones(nT,1),ones(maxs,1)); % number of years for final OE model


%**************** ADJUST CLIMATE MATRIX C SO ONLY
% THE LONGEST CONSEC NON-NAN SEQUENCES REMAIN NON-NAN
% In other words, the result will have no internal imbedded NaNs
for n = 1:nC;
	c1=C(:,n); % temporary storage of this stations climate vector
	c2=a(ones(mC,1),:); % same size vector of NaN
	[ii1,ii2]=consec(c1); % start,end row indices of good stretch
	nsub = ii2-ii1+1; % number of values in good stretch
	c2(ii1:ii2)=c1(ii1:ii2); % insert the good stretch in c2
	C(:,n)=c2; % replace column of C
end
clear c1 c2 nsub	



%
%*************** LOOP OVER CHRONOLOGIES ************************

pack

% Build a matrix of OE model structures.  These will be the
% candidate models.
nn=struc3(1:nb,0:nf,0,ntot); % no-delay models only


% Start the loop over chronologies
for n =1:nT; %575:584; %1:nT;
	ns=N(n); % number of stations found for this chronology
	C1=C(:,W(n,1:ns)); % col sub-matrix of the "near" stations
	z= T(:,n); % all rows of data for this chronology
	
	for k = 1:ns;
		disp(['On chron ',int2str(n),' station ',int2str(k)])
		c = C1(:,k);

		% Get the valid data for common period; need input climate
		% series u and output chronology y, and year vector yrs
		[u,y,yrs]=overlap(c,z,flipud(YRS));

		% Get correlation coefficient between u and y
		rr1= corrcoef([y u]);
		r1=rr1(1,2);

		nyrs = length(u); % number of years for OE modeling
		%  OE-model the series with split-sample validation
		Z=[y u];
		[s,r2,ob,of,f1,f2,way,k2,smore]=oefit(Z,yrs,nn,nranked,1);

		% Store the results for this chronology/station
		K2(n,k)=k2;
		OB(n,k)=ob;
		OF(n,k)=of;
		G(n,k)=f1;
		H(n,k)=f2;
		R1(n,k)=r1;
		R2(n,k)=r2;
      S(n,k)=s;
      Smore(n,k)=smore;
		NY(n,k)=nyrs;
      %Q(n,k)=way;
      Q(n,k)=NaN;
	end

end; % of "n=" loop over chronologies

elapsed=etime(clock,tstart);

set2=' K2 OB OF R1 R2 G H S Smore NY ';

% Store result in a .mat file of the user's choice
disp('Example file name for next prompt is AP1OS1.mat')
disp(' meaning tree-matri A')
disp('		Precip')
disp('		season 1 (nov-apr)')
disp('		Output, Screen1.m')
disp(' press return')
pause
[file1, newpath] = uiputfile('*.mat', '?P#OS1.MAT ');
eval(['save ',newpath,file1,set2])
